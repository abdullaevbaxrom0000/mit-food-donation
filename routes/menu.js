const express = require('express');
const router = express.Router();
const { Pool } = require('pg');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

// GET /api/menu
router.get('/', async (req, res) => {
  try {
    console.log('‚è≥ –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω—é –∏–∑ –±–∞–∑—ã...');

    const result = await pool.query('SELECT * FROM dishes');
    console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –±–ª—é–¥:', result.rows.length);
    console.log('üì• –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –±–∞–∑—ã:', result.rows); // ‚úÖ –í–æ—Ç –∑–¥–µ—Å—å

    const grouped = {
      burgers: [],
      sticks: [],
      combos: [],
      pizzas: [],
      rolls: [],
      extras: [],
      drinks: [],
      desserts: [],
    };

    result.rows.forEach((dish) => {
      if (grouped[dish.category]) {
        grouped[dish.category].push(dish);
      } else {
        console.warn(`‚ö† –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${dish.category}`);
      }
    });

    const categories = [
      {
        title: '–ë—É—Ä–≥–µ—Ä—ã "–ö–∞—Ç"',
        id: 'burgers',
        items: grouped.burgers.map(mapDish),
      },
      {
        title: '–°—Ç–∏–∫–∏',
        id: 'sticks',
        items: grouped.sticks.map(mapDish),
      },
      {
        title: '–ö–æ–º–±–æ',
        id: 'combos',
        items: grouped.combos.map(mapDish),
      },
      {
        title: '–ü–∏—Ü—Ü—ã',
        id: 'pizzas',
        items: grouped.pizzas.map(mapDish),
      },
      {
        title: '–†–æ–ª—ã',
        id: 'rolls',
        items: grouped.rolls.map(mapDish),
      },
      {
        title: '–î–æ–ø—ã',
        id: 'extras',
        items: grouped.extras.map(mapDish),
      },
      {
        title: '–ù–∞–ø–∏—Ç–∫–∏',
        id: 'drinks',
        items: grouped.drinks.map(mapDish),
      },
      {
        title: '–î–µ—Å–µ—Ä—Ç—ã',
        id: 'desserts',
        items: grouped.desserts.map(mapDish),
      },
    ];

    console.log(' –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', JSON.stringify(categories, null, 2));


    return res.json({ success: true, categories });
  } catch (err) {
    console.error(' –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–Ω—é:', err);
    return res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});






// –û–±—Ä–∞–±–æ—Ç–∫–∞ POST /api/menu
router.post('/', async (req, res) => {
  try {
    // 1. –°—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ req.body
    const { name, category, price, description, image_url } = req.body;

    // 2. –í—ã–ø–æ–ª–Ω—è–µ–º SQL-–∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É dishes (–ø—Ä–∏–º–µ—Ä!)
    const insertQuery = `
      INSERT INTO dishes (name, category, price, description, img)
      VALUES ($1, $2, $3, $4, $5)
      RETURNING id
    `;
    const values = [name, category, price, description, image_url];

    const result = await pool.query(insertQuery, values);

    // 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    res.json({ 
      success: true, 
      message: '–ë–ª—é–¥–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ', 
      newDishId: result.rows[0].id 
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–ª—é–¥–∞:', err);
    res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–ª—é–¥–∞' });
  }
});


// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–ª—é–¥–∞ –ø–æ ID
router.put('/:id', async (req, res) => {
  const { id } = req.params;
  const { name, description, price, image_url, category } = req.body;

  try {
    const result = await pool.query(
      `UPDATE dishes 
       SET name = $1, description = $2, price = $3, img = $4, category = $5 
       WHERE id = $6 
       RETURNING *`,
      [name, description, price, image_url, category, id]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({ message: "–ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" });
    }

    res.status(200).json(result.rows[0]);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–ª—é–¥–∞:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});




// –í—ã–Ω–µ—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ –±–ª—é–¥–∞
function mapDish(d) {
  return {
    id: d.id,
    name: d.name,
    price: `${Number(d.price).toLocaleString()} —Å—É–º`,
    img: d.img,
    description: d.description
  };
}


module.exports = router;
